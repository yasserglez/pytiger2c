graph LanguageNodes {
    node [fontname="monospace",fontsize="10",shape="box"];
    edge [fontname="monospace",fontsize="10"];
    
    LanguageNode -- NonValuedExpressionNode;
    LanguageNode -- ValuedExpressionNode;

   
    NonValuedExpressionNode -- DeclarationNode;
    NonValuedExpressionNode -- AssignmentNode;
    NonValuedExpressionNode -- IfThenStatementNode;
    NonValuedExpressionNode -- WhileStatementNode;
    NonValuedExpressionNode -- ForStatementNode;
    NonValuedExpressionNode -- BreakStatementNode;
    
    DeclarationNode -- CallableDeclarationNode;
    DeclarationNode -- VariableDeclarationNode;
    DeclarationNode -- TypeDeclarationNode;
    
    CallableDeclarationNode -- FunctionDeclarationNode;
    CallableDeclarationNode -- ProcedurDeclarationNode;
    
    VariableDeclarationNode -- InferredVariableDeclarationNode;
    VariableDeclarationNode -- StaticVariableDeclarationNode;
    
    TypeDeclarationNode -- AliasTypeDeclarationNode;
    TypeDeclarationNode -- RecordDeclarationNode;
    TypeDeclarationNode -- ArrayDeclarationNode;
    
    
	ValuedExpressionNode -- NilExpressionNode;
    ValuedExpressionNode -- IntegerLiteralExpressionNode;
    ValuedExpressionNode -- StringLiteralExpressionNode;
    ValuedExpressionNode -- IfThenElseNode;
    ValuedExpressionNode -- FunctionCallNode;
    ValuedExpressionNode -- LetNode;
    ValuedExpressionNode -- ExpressionSequenceNode;
    ValuedExpressionNode -- AccessNode; 
    ValuedExpressionNode -- OperatorNode;
    
    AccessNode -- VariableAccessNode;
    AccessNode -- RecordAccessNode;
    AccessNode -- ArrayAccessNode;
    
    OperatorNode -- UnaryOperatorNode;
    OperatorNode -- BinaryOperatorNode; 
    
    BinaryOperatorNode -- ArithmeticOperatorNode;
    BinaryOperatorNode -- LogicalOperatorNode;
    
    UnaryOperatorNode -- UnaryMinusOperatorNode;
    
    ArithmeticOperatorNode -- PlusOperatorNode;
    ArithmeticOperatorNode -- MinusOperatorNode;    
    ArithmeticOperatorNode -- TimesOperatorNode;
    ArithmeticOperatorNode -- DivideOperatorNode;
    
    LogicalOperatorNode -- EqualsOperatorNode;
    LogicalOperatorNode -- NotEqualsOperatorNode;
    LogicalOperatorNode -- LessThanOperatorNode;
    LogicalOperatorNode -- LessEqualsThanOperatorNode;
    LogicalOperatorNode -- GreaterThanOperatorNode;
    LogicalOperatorNode -- GreaterEqualsThanOperatorNode;
    LogicalOperatorNode -- AndOperatorNode;
    LogicalOperatorNode -- OrOperatorNode;
}
